#test01

$AWS_ACCOUNT_ID = '739287608007'
$AWS_REGION = 'ap-southeast-2'
$ECR_REPOSITORY = 'meetlyomni/frontend'
$ECR_REGISTRY = "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
$IMAGE = "$ECR_REGISTRY/$ECR_REPOSITORY"
$TAG = 'meetlyomni-frontend-prod.1.1.1'

try {
  aws ecr describe-repositories --region $AWS_REGION --repository-names $ECR_REPOSITORY -ErrorAction Stop | Out-Null
} catch {
  aws ecr create-repository --region $AWS_REGION --repository-name $ECR_REPOSITORY | Out-Null
}

aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

docker build --pull -t "${IMAGE}:$TAG" .
docker push "${IMAGE}:$TAG"


# 填写你的私钥路径
$KEY = 'C:\Users\biaoj\Downloads\aws-credential\meetly-dev.pem'

# 与 Jenkinsfile 保持一致
$EC2_HOST = 'ubuntu@44.224.30.221'
$AWS_ACCOUNT_ID = '739287608007'
$AWS_REGION = 'ap-southeast-2'
$ECR_REPOSITORY = 'meetlyomni/frontend'
$ECR_REGISTRY = "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
$IMAGE = "$ECR_REGISTRY/$ECR_REPOSITORY"
$PROD_TAG = 'meetlyomni-frontend-prod.1.1.1'

ssh -i $KEY -o StrictHostKeyChecking=no $EC2_HOST "aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY && docker pull ${IMAGE}:$PROD_TAG && (docker rm -f meetly-frontend || true) && docker run -d --name meetly-frontend -p 3000:3000 --restart unless-stopped ${IMAGE}:$PROD_TAG && docker image prune -f"

//为Melissa添加key
sudo mkdir -p /home/jenkins/.ssh
sudo chmod 700 /home/jenkins/.ssh
sudo chown -R jenkins:jenkins /home/jenkins/.ssh

echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDrGkRI66Qc5H5flAEcRQkvgtCuaHRFONX1NXubM1gymEgjzQloGDkTbMfn2hC6yTvRQLSFOzTjv0sLGe9QDGawb2VkonIQG46d9g4GbjRb4zN1rA+Tl+pcxTKi1A8Ora+eGVubwsCNfiYTcNUHu2sspsSotCST1dMJLdDvL7ffF5L2Ts967DoVfQWtVF5URO96pkpk0f9Mz0m+vTWKOie6dpOY3LGkOs84+cJXSaLEBb39ZCXkAPFIxWV2w1Gb2njB8KHWvIsEUxEqK2Rxvl9d+1BETz8ckIlx5c8PfSErGH4waJo3BZbQpbA7K63zbSKPD0lDnPPUVPckjOH6xIbOw4Fe6itZdpP/ZQ2VR0nr2MFOXgCKtBM1m2109aMRhEoRhlL/og9FDRXm7fTnkJCDxBluSAvw5d7xCAVlAy9t2sAbAqjbhKjD3Ro599c/IW85XRt0rsC3qc+qIL/JgHKGAx2I5FyIX6ATvmx0iwDCWuETXMvc0WAJo5CwaVPj/GRcISz76JlPwG+d9M6oBtABmVc9+2H6UuZ4SE7G8qcARhdE7kNYKxOf3yt1mNc9mVdXX7MxBxWTC6+oWevXL5OaqxZPxArppqbzsX0ax9y0JDqt5KNPLM0O7rauWnEYChda4lch8UXxLSHB89mztTTo5VGuQJUiaWGEV1HIkmiqGw== jenkins@jenkins-frontend" | sudo tee -a /home/jenkins/.ssh/authorized_keys
sudo chmod 600 /home/jenkins/.ssh/authorized_keys
sudo chown jenkins:jenkins /home/jenkins/.ssh/authorized_keys





//创建ECS
export AWS_REGION=ap-southeast-2
export AWS_ACC=739287608007
export CLUSTER=meetly-frontend
export SERVICE=meetly-frontend-svc
export APP_NAME=meetly-frontend
export IMAGE_REPO="${AWS_ACC}.dkr.ecr.${AWS_REGION}.amazonaws.com/meetly-omni-frontend-dev"
export IMAGE_TAG="202509041233-27-4431e30"   


//IAM Role创建
cat > trust-ecs-tasks.json <<'EOF'
{
  "Version": "2012-10-17",
  "Statement": [
    { "Effect": "Allow",
      "Principal": { "Service": "ecs-tasks.amazonaws.com" },
      "Action": "sts:AssumeRole"
    }
  ]
}
EOF

aws iam create-role \
  --role-name ecsTaskExecutionRole \
  --assume-role-policy-document file://trust-ecs-tasks.json || true

aws iam attach-role-policy \
  --role-name ecsTaskExecutionRole \
  --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

# 允许从 SSM Parameter Store 读参数（含解密）
cat > execrole-ssm-policy.json <<'EOF'
{
  "Version": "2012-10-17",
  "Statement": [
    { "Effect": "Allow",
      "Action": ["ssm:GetParameters","ssm:GetParameter","ssm:GetParametersByPath"],
      "Resource": "arn:aws:ssm:*:*:parameter/meetly/*"
    },
    { "Effect": "Allow",
      "Action": ["kms:Decrypt"],
      "Resource": "*"
    }
  ]
}
EOF

aws iam put-role-policy \
  --role-name ecsTaskExecutionRole \
  --policy-name ecsTaskExecutionRoleSSMAccess \
  --policy-document file://execrole-ssm-policy.json


//配置vpc
export VPC_ID=vpc-04c86c427522e4af4
export PUB_SUBNET1=subnet-0cab0ac9997018533
export PUB_SUBNET2=subnet-08bdfc01e794ffc75
export PRIV_SUBNET1=subnet-0943a274e8902d1aa
export PRIV_SUBNET2=subnet-01bf1586b05bdcf4e

"command": ["sh", "-c", "HOST=0.0.0.0 PORT=3000 node server.js"],

$env:HTTP_PROXY  = "http://127.0.0.1:7890"
$env:HTTPS_PROXY = "http://127.0.0.1:7890"

git config --global http.proxy http://127.0.0.1:7890
git config --global https.proxy http://127.0.0.1:7890
