pipeline {
  agent any

  environment {
    IMAGE = "${ECR_REGISTRY}/${ECR_REPOSITORY}"
    IMAGE_NAME = 'meetly-omni-frontend-dev'

    EC2_HOST = 'ubuntu@44.224.30.221'
    ECR_REGISTRY = "739287608007.dkr.ecr.ap-southeast-2.amazonaws.com"

    NEXT_PUBLIC_API_BASE_URL = 'https://api-uat.meetlyomni.com'
    //NODE_ENV = 'production' //环境变量写死在Dockerfile中
  }

  options { timestamps() }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Calc Dev Version') {
      //agent { label 'build-agent' }
      steps {
        script {
          def ver = sh(
            returnStdout: true,
            script: '''
              TS=$(date +%Y%m%d%H%M)
              SHA=$(git rev-parse --short HEAD || echo unknown)
              echo "${TS}-${BUILD_NUMBER}-${SHA}"
            '''
          ).trim()
          env.VERSION = ver
          env.ECR_VERSION_URI = "${env.ECR_REGISTRY}/${env.IMAGE_NAME}:${env.VERSION}"
          echo "Dev image version: ${env.VERSION}"
        }
      }
    }
    
    stage('CI - Install Dependencies') {
      //agent { label 'build-agent' }
      when { anyOf { branch 'dev-biaojin'; changeRequest(target: 'dev-biaojin') } }
      steps { sh 'npm ci' }
    }

    stage('CI - Build Project') {
      //agent { label 'build-agent' }
      when { anyOf { branch 'dev-biaojin'; changeRequest(target: 'dev-biaojin') } }
      steps { sh 'npm run build' }
    }

    stage('Docker Build') {
      //agent { label 'build-agent' }
      when { anyOf { branch 'dev-biaojin'; changeRequest(target: 'dev-biaojin') } }
      steps {
        sh """
          docker build \\
            --build-arg NEXT_PUBLIC_API_BASE_URL=${NEXT_PUBLIC_API_BASE_URL} \\
            --build-arg NODE_ENV=production \\
            -t ${IMAGE_NAME}:${VERSION} \\
            .
        """
      }
    }

    stage('push to ECR') {
      //agent { label 'build-agent' }
      when { anyOf { branch 'dev-biaojin'; changeRequest(target: 'dev-biaojin') } }
      steps {
        script {
          withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws_biaojin']]) {
            sh """
              aws --version | cat
              aws ecr describe-repositories --region ap-southeast-2 --repository-names ${IMAGE_NAME} \
              || aws ecr create-repository --region ap-southeast-2 --repository-name ${IMAGE_NAME}
              aws ecr get-login-password --region ap-southeast-2 \
                | docker login --username AWS --password-stdin ${ECR_REGISTRY}

              docker tag ${IMAGE_NAME}:${VERSION} ${ECR_VERSION_URI}
              docker push ${ECR_VERSION_URI}
            """
          }
        }
      }
    }

    stage('Deploy to EC2 (docker run)') {
      //agent { label 'deploy-agent' }
      when {
        allOf { branch 'dev-biaojin'; not { changeRequest() } } // 只在分支直推时部署
      }
      steps {
        script {
          sshagent(credentials: ['meetly-dev-ec2']) {
            sh """
              ssh -o StrictHostKeyChecking=no ${EC2_HOST} '
                set -e
                aws ecr get-login-password --region ap-southeast-2 \
                  | docker login --username AWS --password-stdin ${ECR_REGISTRY} &&
                docker pull ${ECR_VERSION_URI} &&
                (docker rm -f meetly-frontend || true) &&
                docker run -d --name meetly-frontend -p 3000:3000 --restart unless-stopped ${ECR_VERSION_URI} &&
                docker image prune -f
              '
            """
          }
        }
      }
    }
  }

  post {
    always { cleanWs() }
    success { echo "Pipeline completed successfully" }
    failure { echo "Pipeline failed" }
  }
  
  // post {
  //   success {
  //     slackSend(channel: '#deployments', message: "✅ FE Dev CD ok — ${env.ECR_VERSION_URI}")
  //   }
  //   failure {
  //     slackSend(channel: '#deployments', message: "❌ FE Dev CD failed (build #${env.BUILD_NUMBER})")
  //   }
  // }
}